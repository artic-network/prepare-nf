#! /usr/env python3
import os
import sys  
import argparse
import pandas as pd 
import re


def load_metadata(metadata_file):
    """
    Load metadata from a CSV or XLS file.
    This function should handle both formats and return a structured format (e.g., list of dictionaries).
    """
    if metadata_file.endswith('.csv'):
        return pd.read_csv(metadata_file)
    elif metadata_file.endswith('.xls') or metadata_file.endswith('.xlsx'):
        return pd.read_excel(metadata_file)
    else:
        raise ValueError("Unsupported metadata file format. Please use CSV or XLS/XLSX.")
    
def check_metadata(metadata):
    """
    Check if the metadata contains the required columns: 'sample', 'barcode', and any additional sample information.
    """
    required_columns = ['sample', 'barcode']
    for col in required_columns:
        if col not in metadata.columns:
            raise ValueError(f"Metadata file is missing required column: {col}")
        
    if not metadata['barcode'].unique().size == metadata['barcode'].size:
        raise ValueError("Metadata contains duplicate barcodes. Each barcode must be unique.")
    
    if not metadata['sample'].unique().size == metadata['sample'].size: 
        raise ValueError("Metadata contains duplicate sample names. Each sample name must be unique.")
    
    return True

def check_run_dir(run_dir, platform, barcodes):
    """
    Check if the run directory exists and contains subdirectories for each barcode.
    """
    if not os.path.exists(run_dir):
        raise ValueError(f"Run directory '{run_dir}' does not exist.")
    
    if platform=='ont':
        subdirs = [d for d in os.listdir(run_dir) if os.path.isdir(os.path.join(run_dir, d))]
        if not subdirs:
            raise ValueError(f"No subdirectories found in run directory '{run_dir}'.")
        
        for barcode in barcodes:
            if barcode not in subdirs:
                raise ValueError(f"Barcode '{barcode}' not found in run directory '{run_dir}'.")
    else:
        raise ValueError(f"Unsupported platform '{platform}'. Only 'ont' is currently supported.")
    return subdirs

def add_fastq_path_to_metadata(metadata, run_dir, platform):
    """
    Add the full path to the fastq files in the metadata DataFrame.
    This function assumes that the run_dir contains subdirectories named after barcodes.
    """
    if platform == 'ont':
        metadata['fastq_path'] = metadata.apply(
            lambda row: os.path.join(run_dir, row['barcode']), axis=1
        )
    else:
        raise ValueError(f"Unsupported platform '{platform}'. Only 'ont' is currently supported.")
    
    return metadata

def check_amplicon_scheme(amplicon_scheme):
    """
    Check if the amplicon scheme is in the correct format.
    """
    # Check if the amplicon scheme matches the expected format
    # Example format: 'artic-inrb-mpox/2500/v1.0.0'
    # This regex checks for a scheme name, followed by a slash, a version number with at least 3 digits, another slash, and a version identifier.
    if not re.match(r'^\S*\/\d{3,}\/v\d\.\d\.\d(-\S+)?$', amplicon_scheme):
        raise ValueError("Amplicon scheme must be in the format 'scheme/version/identifier  (e.g., artic-inrb-mpox/2500/v1.0.0)'.")
        
    return True

def save_metadata(metadata, output_file='sample_sheet.csv'):
    with open(output_file, 'w') as f:
        metadata.to_csv(f, index=False)

def main():
    parser = argparse.ArgumentParser(description="Create sample sheet from input data.")
    parser.add_argument("platform", type=str, help="Platform.")
    parser.add_argument("run_dir", type=str, help="Run directory")
    parser.add_argument("metadata", type=str, help="Metadata file (CSV or XLS).")
    parser.add_argument("amplicon_scheme", type=str, help="Amplicon scheme identifier (e.g., artic-inrb-mpox/2500/v1.0.0")
    parser.add_argument("--outdir", type=str, default="output", help="Output directory for the sample sheet (default: output).")
    args = parser.parse_args()

    # Load metadata
    metadata = load_metadata(args.metadata)
    check_metadata(metadata)

    check_amplicon_scheme(args.amplicon_scheme)

    check_run_dir(args.run_dir, args.platform, metadata['barcode'])
    metadata = add_fastq_path_to_metadata(metadata, args.run_dir, args.platform)

    save_metadata(metadata, "sample_sheet.csv")


if __name__ == "__main__":
    main()

# todo: only allow excel spreadsheets generated by our templates
# todo: check dates in metadata if they are specified